#lang racket

;;; Student Name: Lucy Wilcox
;;;
;;; Check one:
;;; [ ] I completed this assignment without assistance or external resources.
;;; [x] I completed this assignment with assistance from ___
;;;     and/or using these external resources:
;;;            Scheme in 1 page
;;;            https://en.wikibooks.org/wiki/Scheme_Programming/Further_Maths#Finding_the_square_root_of_a_number
;;;            http://norvig.com/python-lisp.html
;;;            http://stackoverflow.com/questions/16443348/schemes-expected-a-procedure-that-can-be-applied-to-arguments
;;;            The example Scheme and Python files inclueded in focs-assignments/day2

;;     NOTE:  You need not worry about error checking in the programs below.

;; 1.  WRITE SQUARE:  given n, returns n^2.  Hint:  use *
(define (square x)
  (* x x))
  
(display (square 2)) (newline)  ;; -> 4

;; 2.  WRITE is-right-triangle:  given three numbers, returns true iff the third
;;     could be the hypotenuse of a right triangle with the specified three side lengths
;;     Hint:  use = to compare numeric values

(define (is-right-triangle a b c)
   (eq? (sqrt(+ (square a)(square b))) c))
  
(display (is-right-triangle 3 4 5)) (newline)  ;; -> #t
(display (is-right-triangle 4 5 6)) (newline)  ;; -> #f

;; 3.  WRITE FACTORIAL:  given n, returns n!
;;     Hint:  recursion is your friend
(define (fact n)
  (cond[(eq? n 1)
        1]
       [else
        (* n (fact(- n 1)))]))

(display (fact 1)) (newline) ;; -> 1
<<<<<<< HEAD
(display (fact 2)) (newline) ;; -> 2 right??? not 1...
=======
(display (fact 2)) (newline) ;; -> 2
(display (fact 3)) (newline) ;; -> 6
>>>>>>> 57dba957e7d9e8a93ae37001b2768555208e796e

;; 4.  WRITE FIBONACCI:  given n, returns the nth fibonacci number as shown below
;;     Hint:  don't run this on really big numbers!
(define (fib n)
   (cond[(eq? n 0)
         0]
        [(eq? n 1)
         1]
        [(eq? n 2)
         1]
        [else
         (+ (fib (- n 1)) (fib (- n 2)))]))

(display (fib 1)) (newline) ;; -> 1
(display (fib 2)) (newline) ;; -> 1
(display (fib 3)) (newline) ;; -> 2
(display (fib 4)) (newline) ;; -> 3
(display (fib 5)) (newline) ;; -> 5
(display (fib 6)) (newline) ;; -> 8

;; 5.  WRITE a procedure that takes a list of numbers and returns the sum of those numbers
;;     Hint:  first, rest, cons
(define (sum-helper total lst)
  (cond[(null? lst)
         total]
       [else
        (sum-helper (+ total (first lst)) (rest lst))]))

(define (sum lst)
   (sum-helper (first lst) (rest lst)))

(display (sum '(1 2 3 4))) (newline) ;; -> 10
(display (sum '(1 20 300))) (newline) ;; -> 321

;; This one uses cons as suggested
(define (sum-no-helper lst)
  (cond[(null? (rest lst))
         (first (cons (first lst) (rest lst)))]
       [else
        (sum-no-helper (cons (+ (first lst) (second lst)) (rest (rest lst))))]))

(display (sum-no-helper '(1 2 3 4))) (newline) ;; -> 10
(display (sum-no-helper '(1 20 300))) (newline) ;; -> 321

;; 6.  WRITE a procedure that takes a list of numbers and returns the largest one.
;;     While there are solutions using scheme's built-in max, we were actually hoping you'd do something else...
(define (my-max lst)
  (cond [(null? (rest lst))
           (first lst)]
        [(> (first (rest (cons (first lst) (rest lst)))) (first (cons (first lst) (rest lst))))
           (my-max (cons (first (rest (cons (first lst) (rest lst)))) (rest (rest (cons (first lst) (rest lst))))))]
        [else
           (my-max (cons (first (cons (first lst) (rest lst))) (rest (rest (cons (first lst) (rest lst))))))]))

(define (my-max2 lst)
  (cond [(null? (rest lst))
           (first lst)]
        [(> (first (rest lst)) (first lst))
           (my-max (cons (first (rest lst)) (rest lst)))]
        [else
           (my-max (rest lst))]))

(display (my-max2 '(1 10 2 20 3))) (newline) ;; -> 20
